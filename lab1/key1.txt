Christopher Zhu UID:104455996 

Exercise 1.1: w g e t SPACE - O SPACE e x e r 1 . h t m l SPACE h t t p 
: / / w e b . c s . u c l a . e d u / c l a s s e s / f a l l 1 5 / c s 
3 5 L / a s s i g n / a s s i g n 1 . h t m l c p SPACE e x e r 1 . h t 
m l SPACE e x e r 2 . h t m l c p SPACE e x e r 1 . h t m l SPACE e x e 
r 3 . h t m l 

1. e m a c s SPACE e x e r 1 . h t m l 
2. C-s A S C I I 
3. RET C-s I n s t r u c t i o n s C-r C-r 
4. RET C-s H T M L C-r C-r 
5. RET C-s h u n t C-r 
6. RET C-e 
7. RET C-a 
8. C-u 1 6 C-p 
9. No 
10. Use commands such as C-u in order to call commands multiple times in 
one call. For example, for question number 8, I used C-u 1 6 C-p which 
calls C-p 16 times which goes backwards one line each time it is called 
in order to call it 16 times with one call. 
11. C-z 

Exercise 1.2: 
1. e m a c s SPC e x e r 2 . h t m l 
2. C-u 1 7 C-n C-k s 
3. C-s d e l e t e m e C-a C-k 
4. C-s h t t p : / / e n C-s C-a C-k C-p C-k C-n C-n C-k 
5. C-s < ! C-b C-b DEL DEL DEL DEL DEL DEL DEL C-x C-c y 
d i f f SPC - u SPACE e x e r 1 . h t m l SPACE e x e r 2 . h t m l SPACE > 
e x e r 2 . d i f f e m a c s SPACE e x e r 2 . d i f f C-z 

Exercise 1.3: 
1. e m a c s SPC e x e r 3 . h t m l 
2. C-s A s s i g n m 
e n t SPACE DEL 3 7 C-s A s s i g n m e n t SPACE DEL 3 7 
3. C-s U T F - 8 C-r C-r C-f DEL DEL DEL DEL S - A S C I I 
4. C-s < o l > ENTER ENTER 
5. C-x C-c y ENTER y e s d i f f SPACE - u SPACE e x e r 1 . h t m l 
SPACE e x e r 3 . h t m l SPACE > e x e r 3 . d i f f e m a c s SPACE e 
x e r 3 . d i f f C-z 

Exercise 1.4: 
1. c a t SPACE e x e r 
2 . h t m l SPACE e x e r 2 . d i f 
f SPACE > e x e r 4 . h t m l 2. e m a c s SPACE e x e r 4 . h t m l 
3. C-u 1 0 0 0 C-n BACKSPACE s C-u 4 C-p C-a C-f C-SPACE C-e M-w C-s s h o 
u l d SPACE o u t p u t C-s C-s C-a C-y C-k 
4. C-s < ! C-s M-h M-w C-s l a b o r a t o r y C-n C-n C-y C-u 3 BACKSPACE 
C-a DEL 

C-s d e l e t e m e C-u 3 C-s M-h M-w C-s l e a r n i n g C-s C-n C-n 
C-y C-u 3 BACKSPACE C-a DEL 

C-s w i k i p e d i a C-s C-s M-h M-w C-s s u b m i t < / h 2 C-s C-n 
DEL DEL C-n C-y BACKSPACE BACKSPACE BACKSPACE BACKSPACE BACKSPACE 
BACKSPACE BACKSPACE C-a DEL C-p DEL C-p DEL 

5. C-x C-p C-s - - - e x e r RETURN C-u 8 C-b C-w 

6. C-x u 

7. C-s - - - e x e r C-a < ! - - C-u 1 0 0 0 C-n BACKSPACE - - > 

8. C-s < o l > C-s C-s C-s C-s C-s C-s C-s I found 7 instances C-u 1 0 0 
0 C-p M-% < o l > RETURN < O l > RETURN SPACE SPACE SPACE SPACE SPACE 
SPACE SPACE C-x C-c y 
9. d i f f SPACE - u SPACE e x e r 1 . h t m l SPACE e x e r 4 . h t m l 
SPACE > e x e r 4 . d i f f e m a c s SPACE e x e r 4 . d i f f 

Exercise 1.5: 
1. M-x m a k e - d i r e c t o r y ENTER j u n k 
2. C-x d j u n k ENTER C-x b h e l l o . c (copy paste code from website) 
C-x C-w ENTER 
3. C-z e m a c s ENTER C-x d j u n k ENTER M-x c o m p i l e ENTER 
BACKSPACE BACKSPACE BACKSPACE BACKSPACE BACKSPACE BACKSPACE BACKSPACE 
BACKSPACE g c c SPACE h e l l o . c SPACE - o SPACE h e l l o ENTER 
4. C-x d j u n k M-x c o m p i l e ENTER . / h e l l o ENTER C-x o C-x C-w 
h e l l o - o u t 
5. C-x C-f h e l l o - o u t C-x C-p M-w C-x o C-y 

-*- mode: compilation; default-directory: "~/junk/" -*- Compilation 
started at Fri Oct 2 21:35:34 

./hello #include <stdio.h> int main (void) { char n = '\n'; char b = 
'\\'; char q = '"'; char const *p = "#include <stdio.h>%cint%cmain 
(void)%c{%c char n = '%cn';%c char b = \ '%c%c';%c char q = '%c';%c char 
const *p = %c%s%c;%c printf (p, n, n, n, n, b, n, b, b,\ n, q, n, q, p, 
q, n, n, n, n);%c return 0;%c}%c"; printf (p, n, n, n, n, b, n, b, b, n, 
q, n, q, p, q, n, n, n, n); return 0; } 

Compilation finished at Fri Oct 2 21:35:34 

Exercise 1.6: 
1. e m a c s ENTER C-x b *scratch* 
2. ( r a n d o m ( ) ) C-j 
3. ( s e t q SPACE x SPACE ( r a n d o m ) ) C-j ( s e t q SPACE y 
SPACE ( r a n d o m ) ) C-j ( s e t q SPACE z SPACE ( r a n d o m ) ) 
C-j 
4. ( * SPACE x SPACE y SPACE z ) C-j The result is not what it 
should be. It appears to be overflowing because it has such large 
numbers when random is called. 
5. The output now has the same value but also includes the number in octal 
and hex. This can be proven since for octal the numbers never reach 8 and 
for the hex one the numbers never go past f. 
6. The random integers are not truly random in the mathematical 
sense, however, the part that is random about them is that they each of 
the 18 digits are randomized. 

